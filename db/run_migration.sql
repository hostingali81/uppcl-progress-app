-- ================================================================================
-- WORKS TABLE RECREATION MIGRATION - STEP-BY-STEP EXECUTION GUIDE
-- ================================================================================
-- This file contains all the SQL statements needed to safely migrate the works table
-- Execute these commands in sequence in your Supabase SQL Editor

-- IMPORTANT SAFETY NOTES:
-- 1. BACKUP YOUR DATA FIRST
-- 2. Test in a development environment before production
-- 3. Verify Google Sheet sync works after migration
-- 4. If migration fails, you can restore from works_backup_20251029

-- ================================================================================

-- STEP 1: CREATE BACKUP OF EXISTING DATA
-- =================================================================================
CREATE TABLE IF NOT EXISTS works_backup_20251029 AS
SELECT * FROM works;

-- Verify backup was created
SELECT COUNT(*) as total_works_records FROM works_backup_20251029;

-- STEP 2: DROP EXISTING WORKS TABLE (Forceful Drop)
-- =================================================================================

-- First attempt: Clean drop with CASCADE
DROP TABLE IF EXISTS works CASCADE;

-- If that doesn't work, we might need to drop constraints manually
-- Uncomment these if the above fails:
/*
-- Drop specific constraints if they exist
ALTER TABLE works DROP CONSTRAINT IF EXISTS works_pkey;
ALTER TABLE works DROP CONSTRAINT IF EXISTS works_scheme_sr_no_unique;
-- Then try dropping again
DROP TABLE works CASCADE;
*/

-- Alternative: Drop everything related (use this if regular drop fails)
DO $$
BEGIN
    -- Drop all constraints and indexes related to works table
    DROP INDEX IF EXISTS works_pkey;
    DROP INDEX IF EXISTS works_scheme_sr_no_key;
    DROP INDEX IF EXISTS works_scheme_sr_no_idx;
    DROP INDEX IF EXISTS works_je_name_idx;
    DROP INDEX IF EXISTS works_district_name_idx;
    DROP INDEX IF EXISTS works_work_category_idx;
    DROP INDEX IF EXISTS works_civil_zone_idx;
    DROP INDEX IF EXISTS works_civil_circle_idx;
    DROP INDEX IF EXISTS works_civil_division_idx;
    DROP INDEX IF EXISTS works_civil_sub_division_idx;
    DROP INDEX IF EXISTS works_distribution_zone_idx;
    DROP INDEX IF EXISTS works_distribution_circle_idx;
    DROP INDEX IF EXISTS works_distribution_division_idx;
    DROP INDEX IF EXISTS works_distribution_sub_division_idx;
    DROP INDEX IF EXISTS works_is_blocked_idx;

    -- Try to drop the table again
    DROP TABLE IF EXISTS works CASCADE;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Could not drop works table in this attempt: %', SQLERRM;
END
$$;

-- STEP 3: CREATE NEW WORKS TABLE STRUCTURE
-- =================================================================================
CREATE TABLE public.works (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  scheme_sr_no TEXT NOT NULL,
  scheme_name TEXT NULL,
  work_name TEXT NULL,
  civil_zone TEXT NULL,
  civil_circle TEXT NULL,
  civil_division TEXT NULL,
  civil_sub_division TEXT NULL,
  district_name TEXT NULL,
  je_name TEXT NULL,
  work_category TEXT NULL,
  site_name TEXT NULL,
  zone_name TEXT NULL,
  circle_name TEXT NULL,
  division_name TEXT NULL,
  sub_division_name TEXT NULL,
  sanction_amount_lacs NUMERIC(12,2) NULL,
  amount_as_per_bp_lacs NUMERIC(12,2) NULL,
  tender_no TEXT NULL,
  boq_amount NUMERIC(12,2) NULL,
  agreement_amount NUMERIC(12,2) NULL,
  bill_no TEXT NULL,
  bill_amount_with_tax NUMERIC(12,2) NULL,
  nit_date DATE NULL,
  part1_opening_date TEXT NULL,
  loi_no_and_date TEXT NULL,
  part2_opening_date DATE NULL,
  rate_as_per_ag TEXT NULL,
  agreement_no_and_date TEXT NULL,
  firm_name_and_contact TEXT NULL,
  firm_contact_no TEXT NULL,
  firm_email TEXT NULL,
  start_date DATE NULL,
  scheduled_completion_date DATE NULL,
  expected_completion_date DATE NULL,
  actual_completion_date DATE NULL,
  weightage INTEGER NULL,
  progress_percentage INTEGER NULL DEFAULT 0,
  wbs_code TEXT NULL,
  mb_status TEXT NULL,
  teco_status TEXT NULL,
  fico_status TEXT NULL,
  teco TEXT NULL,
  fico TEXT NULL,
  distribution_zone TEXT NULL,
  distribution_circle TEXT NULL,
  distribution_division TEXT NULL,
  distribution_sub_division TEXT NULL,
  remark TEXT NULL,
  site TEXT NULL,
  email_id TEXT NULL,
  is_blocked BOOLEAN NOT NULL DEFAULT FALSE,
  blocker_remark TEXT NULL,
  created_at TIMESTAMP WITH TIME ZONE NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NULL DEFAULT NOW(),
  edc TEXT NULL,
  edd TEXT NULL,
  edsd TEXT NULL,
  scheme_name_new TEXT NULL,
  scheme_sr_no_new TEXT NULL,
  je_name_new TEXT NULL,
  work_category_new TEXT NULL,
  work_name_new TEXT NULL,
  amount_as_per_bp_lacs_new NUMERIC(12,2) NULL,
  boq_amount_new NUMERIC(12,2) NULL,
  agreement_amount_new NUMERIC(12,2) NULL,
  rate_as_per_ag_new TEXT NULL,
  firm_name_and_contact_new TEXT NULL,
  firm_contact_no_new TEXT NULL,
  start_date_new DATE NULL,
  scheduled_completion_date_new DATE NULL,
  weightage_new NUMERIC NULL,
  progress_percentage_new NUMERIC NULL,
  remark_new TEXT NULL,
  wbs_code_new TEXT NULL,
  mb_status_new TEXT NULL,
  teco_status_new TEXT NULL,
  fico_status_new TEXT NULL,
  CONSTRAINT works_pkey PRIMARY KEY (id),
  CONSTRAINT works_scheme_sr_no_unique UNIQUE (scheme_sr_no)
);

-- STEP 4: CREATE PERFORMANCE INDEXES
-- =================================================================================
CREATE INDEX IF NOT EXISTS works_je_name_idx ON works (je_name);
CREATE INDEX IF NOT EXISTS works_district_name_idx ON works (district_name);
CREATE INDEX IF NOT EXISTS works_work_category_idx ON works (work_category);
CREATE INDEX IF NOT EXISTS works_civil_zone_idx ON works (civil_zone);
CREATE INDEX IF NOT EXISTS works_civil_circle_idx ON works (civil_circle);
CREATE INDEX IF NOT EXISTS works_civil_division_idx ON works (civil_division);
CREATE INDEX IF NOT EXISTS works_civil_sub_division_idx ON works (civil_sub_division);
CREATE INDEX IF NOT EXISTS works_distribution_zone_idx ON works (distribution_zone);
CREATE INDEX IF NOT EXISTS works_distribution_circle_idx ON works (distribution_circle);
CREATE INDEX IF NOT EXISTS works_distribution_division_idx ON works (distribution_division);
CREATE INDEX IF NOT EXISTS works_distribution_sub_division_idx ON works (distribution_sub_division);
CREATE INDEX IF NOT EXISTS works_scheme_sr_no_idx ON works (scheme_sr_no);
CREATE INDEX IF NOT EXISTS works_is_blocked_idx ON works (is_blocked);

-- STEP 5: CREATE TRIGGERS FOR AUDIT FIELDS
-- =================================================================================
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_works_update
    BEFORE UPDATE ON works
    FOR EACH ROW
    EXECUTE FUNCTION handle_updated_at();

-- STEP 6: ENABLE ROW LEVEL SECURITY
-- =================================================================================
ALTER TABLE works ENABLE ROW LEVEL SECURITY;

-- STEP 7: OPTIONAL - INSERT SAMPLE DATA FOR TESTING
-- =================================================================================
-- Uncomment these lines if you want to insert sample data
/*
INSERT INTO public.works (
  scheme_sr_no,
  scheme_name,
  work_name,
  civil_zone,
  civil_circle,
  civil_division,
  civil_sub_division,
  district_name,
  je_name,
  work_category,
  sanction_amount_lacs,
  progress_percentage
) VALUES (
  'TEST-001',
  'Test Scheme',
  'Test Work Name',
  'Test Zone',
  'Test Circle',
  'Test Division',
  'Test Sub-Division',
  'Test District',
  'Test JE',
  'Test Category',
  10.50,
  25
);
*/

-- STEP 8: VERIFY MIGRATION SUCCESS
-- =================================================================================
-- Check table structure
SELECT column_name, data_type, is_nullable
FROM information_schema.columns
WHERE table_name = 'works'
ORDER BY ordinal_position;

-- Check table exists and has proper constraints
SELECT
    COUNT(*) as total_records,
    COUNT(DISTINCT scheme_sr_no) as unique_scheme_sr_no
FROM public.works;

-- ================================================================================
-- MIGRATION COMPLETE - TEST YOUR APPLICATION
-- ================================================================================
-- 1. Test dashboard loads without errors
-- 2. Test Google Sheet sync functionality
-- 3. Test work detail pages load correctly
-- 4. Test that all columns in work details display properly

-- If you need to rollback:
-- DROP TABLE public.works CASCADE;
-- ALTER TABLE works_backup_20251029 RENAME TO works;
