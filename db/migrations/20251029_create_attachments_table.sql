-- Migration: Create attachments table with proper relationships
-- Description: Sets up attachments table with foreign keys to works and RLS policies

-- Drop table if it exists to ensure clean creation
DROP TABLE IF EXISTS public.attachments CASCADE;

-- Create attachments table
CREATE TABLE public.attachments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    work_id BIGINT NOT NULL,
    file_url TEXT NOT NULL,
    file_name TEXT,
    uploader_id UUID NOT NULL,
    uploader_full_name TEXT,
    FOREIGN KEY (work_id) REFERENCES public.works(id) ON DELETE CASCADE,
    FOREIGN KEY (uploader_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS attachments_work_id_idx ON public.attachments(work_id);
CREATE INDEX IF NOT EXISTS attachments_uploader_id_idx ON public.attachments(uploader_id);

-- Enable Row Level Security
ALTER TABLE public.attachments ENABLE ROW LEVEL SECURITY;

-- Create RLS policies

-- Allow users to view attachments for works they have access to
CREATE POLICY "attachments_select_policy" ON public.attachments
FOR SELECT USING (
    -- Users can view attachments of works they have access to
    EXISTS (
        SELECT 1 FROM public.works w
        WHERE w.id = attachments.work_id
    )
);

-- Allow authenticated users to insert attachments
CREATE POLICY "attachments_insert_policy" ON public.attachments
FOR INSERT WITH CHECK (
    auth.uid() = uploader_id
);

-- Allow users to delete their own attachments
CREATE POLICY "attachments_delete_policy" ON public.attachments
FOR DELETE USING (
    auth.uid() = uploader_id
);

-- Grant appropriate privileges
GRANT ALL ON public.attachments TO authenticated;
GRANT USAGE ON SEQUENCE public.attachments_id_seq TO authenticated;

-- Verify setup
SELECT
    tc.table_schema, 
    tc.constraint_name, 
    tc.table_name, 
    kcu.column_name,
    ccu.table_schema AS foreign_table_schema,
    ccu.table_name AS foreign_table_name,
    ccu.column_name AS foreign_column_name
FROM 
    information_schema.table_constraints AS tc 
    JOIN information_schema.key_column_usage AS kcu
      ON tc.constraint_name = kcu.constraint_name
      AND tc.table_schema = kcu.table_schema
    JOIN information_schema.constraint_column_usage AS ccu
      ON ccu.constraint_name = tc.constraint_name
      AND ccu.table_schema = tc.table_schema
WHERE tc.constraint_type = 'FOREIGN KEY' 
    AND tc.table_name='attachments';

-- List RLS policies
SELECT schemaname, tablename, policyname
FROM pg_policies
WHERE tablename = 'attachments';